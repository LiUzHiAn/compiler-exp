%{
#include "token.h"
int cur_line_num=1;
void init_scanner();
void lex_error(char* msg,int line);
%}

/*Definitions部分,\042是 '"' */
INTEGER         ([0-9]+)
UNTERM_STRING   (\042[^\042\n]*)
STRING          (\042[^\042\n]*\042)
IDENTIFIER      ([_A-Za-z][_A-Za-z0-9]*)
OPERATOR        ([+*-/%=,;!<>(){}])
SIGLE_COMMENT1  ("//"[^\n]*)
SIGLE_COMMENT2  ("#"[^\n]*)

%%
[\n+]               {cur_line_num++;}
[ \r\a\t]           {/*do nothing to space*/}
{SIGLE_COMMENT1}    {/*do nothing*/}
{SIGLE_COMMENT2}    {/*do nothing*/}
{OPERATOR}          {return yytext[0];}

"<="                { return T_Le;              }
">="                { return T_Ge;              }
"=="                { return T_Eq;              }
"!="                { return T_Ne;              }
"&&"                { return T_And;             }
"||"                { return T_Or;              }
"void"              { return T_Void;            }
"int"               { return T_Int;             }
"while"             { return T_While;           }
"if"                { return T_If;              }
"else"              { return T_Else;            }
"return"            { return T_Return;          }
"break"             { return T_Break;           }
"continue"          { return T_Continue;        }
"print"             { return T_Print;           }
"readint"           { return T_ReadInt;         }

{INTEGER}           { return T_IntConstant;     }
{STRING}            { return T_StringConstant;  }
{IDENTIFIER}        { return T_Identifier;      }
<<EOF>>             { return 0; }

{UNTERM_STRING}     { lex_error("Unterminated string constant", cur_line_num);  }
.                   { lex_error("Unrecognized character", cur_line_num);        }

%%

int main(int argc,char* argv[])
{
    int token;
    init_scanner();
    while(token=yylex())
    {
        print_token(token);  // token的类型
        puts(yytext);        // token的取值
    }
    return 0;
}

void init_scanner()
{
    printf("%-20s%s\n","TOKEN-TYPE","TOKEN-VALUE");
    printf("-------------------------------------------\n");
}

void lex_error(char* msg,int line)
{
    printf("\nError at line %-3d:%s\n\n",line,msg);
}

int yywrap()
{
    return 1;
}